This is the SOP of the mission.

Phase 1: Take-off and Target Acquisition
    • UAV-1 and UAV-2 take off under GCS control.
    • UAV-2 identifies the target attachment point using onboard vision and position data.
    • UAV-1 positions near the target zone and awaits spraying command.
Phase 2: Adhesive Spraying (UAV-1)
    • UAV-1 approaches the surface, cleans, and sprays the adhesive component at the marked location.
    • Coordinates are relayed to UAV-2 for alignment.
Phase 3: Sensor Deployment (UAV-2)
    • UAV-2 navigates to the marked location.
    • The trajectory algorithm ensures that the manipulator end-effector remains parallel to the wall.
    • UAV-2 approaches the surface and begins the contact procedure.
    • Adaptive impedance control is engaged to maintain steady pressure during bonding.

Using the defined functions in the class, generate a code for the 'createBehaviourTree' function to create a behaviour tree based on the SOP defined above, to perform all the actions defined above 
for the three waypoints on the bridge. {
                'x': 1,
                'y': -3.25,
                'z': 8
            },
            {
                'x': -2,
                'y': -3.25,
                'z': 8
            },
            {
                'x': -3,
                'y': -3.25,
                'z': 8
            }

Return only the completed function that should return the root of the resultant tree, no need to return the entire class. You can create new helper functions


class ActionBehaviour(py_trees.behaviour.Behaviour):
    def __init__(self, name, action_fn=None, max_retries=25, timeout=50.0):
        super().__init__(name)
        self.action_fn = action_fn
        self.max_retries = max_retries
        self.retry_count = 0
        self.timeout = timeout
        self.start_time = None
        self.action_started = False

    def initialise(self):
        self.start_time = time.time()
        self.retry_count = 0
        self.action_started = False
        logging.info(f"Starting: {self.name}")

    def update(self):
        if not self.action_started:
            # mark that we started and wait for the next tick so the action can be processed
            self.action_started = True
            return py_trees.common.Status.RUNNING
            
        # timeout check
        if time.time() - self.start_time > self.timeout:
            logging.error(f"Timeout in {self.name}")
            return py_trees.common.Status.FAILURE

        try:
            result = self.action_fn() if self.action_fn else True
            
            if result is True:
                return py_trees.common.Status.SUCCESS
            elif result is False:
                self.retry_count += 1
                if self.retry_count >= self.max_retries:
                    return py_trees.common.Status.FAILURE
                # allow another attempt on the next tick
                self.action_started = False
                return py_trees.common.Status.RUNNING
            else:
                # a non-boolean result means the action is still in progress
                return py_trees.common.Status.RUNNING
                
        except Exception as e:
            logging.error(f"Error in {self.name}: {str(e)}")
            self.retry_count += 1
            if self.retry_count >= self.max_retries:
                return py_trees.common.Status.FAILURE
            self.action_started = False
            return py_trees.common.Status.RUNNING
        

class BridgeInspectionPhase1:
    def __init__(self,droneInterface):
        self.drones = []
        self.droneInterface = droneInterface
        self.tree = None
        self.waypoints = [
            {
                'x': 1,
                'y': -3.25,
                'z': 8
            },
            {
                'x': -2,
                'y': -3.25,
                'z': 8
            },
            {
                'x': -3,
                'y': -3.25,
                'z': 8
            }
        ]
        self.drone1_waypoint = None
        self.drone2_waypoint = None
        


    # === Function that every behaviour will call ===
    def do_action(self,droneId):
        sleep(1)
        return True  

    # === Custom Action Node with Logging and Function Call ===
    
    def _verify_drone_methods(self, method_names):
        """Verify that the drone interface has the required methods"""
        for method_name in method_names:
            if not hasattr(self.droneInterface, method_name):
                raise AttributeError(
                    f"Drone interface is missing required method: {method_name}"
                )
            
    def armDrone(self,droneId):

        root = py_trees.composites.Sequence(name=f"ArmDrone_{droneId}", memory=True)
        arm = ActionBehaviour(
            f"Arm_{droneId}", 
            lambda: self.droneInterface.arm_drone(droneId),
            max_retries=3,
            timeout=120.0
        )
        root.add_children([arm])
        return root
    
    def offboard(self,droneId):

        root = py_trees.composites.Sequence(name=f"Go_offboard_{droneId}", memory=True)
        offboard = ActionBehaviour(
            f"Offboard_{droneId}", 
            lambda: self.droneInterface.go_off_board(droneId),
            max_retries=3,
            timeout=120.0
        )
        root.add_children([offboard])
        return root
    def takeOff(self, droneId):
        """Improved takeoff sequence with verification"""
        # verify required methods for takeoff
        self._verify_drone_methods(['arm_drone', 'go_off_board', 'takeoff', 'is_at_altitude'])

        root = py_trees.composites.Sequence(name=f"TakeOff_{droneId}", memory=True)
        
        
        
        
        takeoff = ActionBehaviour(
            f"TakeOffCmd_{droneId}", 
            lambda: self.droneInterface.takeoff(droneId),
            max_retries=3,
            timeout=120.0
        )
        root.add_children([ takeoff])
        return root

    def acquireTarget(self, droneId):
        # verify required methods for acquireTarget
        self._verify_drone_methods(['go_to', 'find_attachment_point', 'is_at_altitude'])

        root = py_trees.composites.Sequence(name=f"AcquireTarget_{droneId}", memory=True)
        

        go_to = ActionBehaviour(
            "GoTo", 
            # in BridgeInspectionPhase1.acquireTarget / approachTarget
            lambda: self.droneInterface.go_to(droneId, self.drone1_waypoint['x'], self.drone1_waypoint['y'], self.drone1_waypoint['z'], 0.5, YawMode.PATH_FACING, None, "earth")
,
            max_retries=5,
            timeout=50.0
        )
        
        
        
        root.add_children([ go_to])
        return root
    def findAttachmentPoint(self,droneId):


        root = py_trees.composites.Sequence(name=f"FindAttachmentPoint_{droneId}", memory=True)
        find_attachment = ActionBehaviour(
            "FindAttachmentPoint", 
            lambda: self.droneInterface.find_attachment_point(droneId,self.drone1_waypoint['x'], self.drone1_waypoint['y'], self.drone1_waypoint['z']),
            max_retries=5,
            timeout=20.0
        )
        root.add_children([find_attachment])
        return root
    
    def createRecoveryTree(self, droneId):
        recovery = py_trees.composites.Sequence(name=f"Recovery_{droneId}", memory=True)
        land = ActionBehaviour("Land", lambda: self.droneInterface.land(droneId), timeout=150.0)
        disarm = ActionBehaviour("Disarm", lambda: self.droneInterface.disarm_drone(droneId), timeout=150.0)
        recovery.add_children([land, disarm])
        return recovery
    

    def land(self, droneId):
        
        # verify required methods
        self._verify_drone_methods(['land', 'disarm_drone'])

        root = py_trees.composites.Sequence(name=f"Land_{droneId}", memory=True)
        land = ActionBehaviour("Land", lambda: self.droneInterface.land(droneId))
        disarm = ActionBehaviour("Disarm", lambda: self.droneInterface.disarm_drone(droneId))
        root.add_children([ land, disarm])
        return root

    def approachTarget(self,droneId):
        # verify required methods
        self._verify_drone_methods(['go_to', 'find_attachment_point', 'is_at_altitude'])

        root = py_trees.composites.Sequence(name=f"ApproachTarget_{droneId}", memory=True)
        # wait_air = WaitForAltitude(self.droneInterface, droneId, altitude=1.5, timeout=120.0)
        goTo = ActionBehaviour("GoTo", lambda:self.droneInterface.go_to(droneId,self.drone2_waypoint['x'], self.drone2_waypoint['y'], self.drone2_waypoint['z'], 0.5, 0, 0, "earth"), max_retries=5, timeout=120.0)
        
        root.add_children([ goTo])
        return root
    def findAttachmentPoint(self,droneId):
        root = py_trees.composites.Sequence(name=f"FindAttachmentPoint_{droneId}", memory=True)
        findAttachmentPoint = ActionBehaviour("FindAttachmentPoint", lambda:self.droneInterface.find_attachment_point(droneId, self.drone2_waypoint['x'], self.drone2_waypoint['y'], self.drone2_waypoint['z']), max_retries=5, timeout=210.0)

        root.add_children([findAttachmentPoint])
        return root

    def cleanSurface(self,droneId):
        root = py_trees.composites.Sequence(name=f"CleanSurface_{droneId}", memory=True)
        cleanSurface = ActionBehaviour("Clean Surface", lambda:self.droneInterface.clean_surface(droneId,self.drone1_waypoint['x'],self.drone1_waypoint['y'],self.drone1_waypoint['z']))
        
        root.add_children([cleanSurface])
        return root
    
    def sprayAdhesive(self,droneId):
        root = py_trees.composites.Sequence(name=f"SprayAdhesive_{droneId}", memory=True)
        sprayAdhesive = ActionBehaviour("Spray Adhesive", lambda:self.droneInterface.spray_adhesive(droneId,self.drone1_waypoint['x'],self.drone1_waypoint['y'],self.drone1_waypoint['z']))

        root.add_children([sprayAdhesive])
        return root
    def sendSensorAttachmentLocation(self,droneId):
        root = py_trees.composites.Sequence(name=f"SendSensorAttachmentLocation_{droneId}", memory=True)
        sendSensorAttachmentLocation = ActionBehaviour("Send Sensor Attachment Location", lambda:self.droneInterface.send_sensor_attachment_location(droneId,self.drone1_waypoint['x'],self.drone1_waypoint['y'],self.drone1_waypoint['z']))

        root.add_children([sendSensorAttachmentLocation])
        return root
    def exposeManipulator(self,droneId):
        root = py_trees.composites.Sequence(name=f"ExposeManipulator_{droneId}", memory=True)
        exposeManipulator = ActionBehaviour("Expose Manipulator", lambda:self.droneInterface.expose_manipulator(droneId,self.drone2_waypoint['x'], self.drone2_waypoint['y'], self.drone2_waypoint['z']))
        
        root.add_children([exposeManipulator])
        return root
    def alignManipulator(self,droneId):
        root = py_trees.composites.Sequence(name=f"AlignManipulator_{droneId}", memory=True)
        alignManipulator = ActionBehaviour("Align Manipulator", lambda:self.droneInterface.align_manipulator(droneId,self.drone2_waypoint['x'], self.drone2_waypoint['y'], self.drone2_waypoint['z'] ))
        
        root.add_children([alignManipulator])
        return root
    
    def applyConstantPressure(self,droneId):
        root = py_trees.composites.Sequence(name=f"ApplyConstantPressure_{droneId}", memory=True)
        applyConstantPressure = ActionBehaviour("Apply Constant Pressure", lambda:self.droneInterface.apply_constant_pressure(droneId,self.drone2_waypoint['x'], self.drone2_waypoint['y'], self.drone2_waypoint['z']))
        
        root.add_children([applyConstantPressure])
        return root
    def attachSensor(self,droneId):
        root = py_trees.composites.Sequence(name=f"AttachSensor_{droneId}", memory=True)
        attachSensor = ActionBehaviour("Attach Sensor", lambda:self.do_action(droneId))

        root.add_children([attachSensor])
        return root

    def createBehaviorTree(self):
        droneId1 = 1
        droneId2 = 2

        
        return root

    


    def tick(self):
        self.tree.tick_tock(
            period_ms=1000,
            number_of_iterations=1,
            pre_tick_handler=None,
            post_tick_handler=None
        )



